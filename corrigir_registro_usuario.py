#!/usr/bin/env python3
"""
Script para Corrigir Registro de Usu√°rio na Competi√ß√£o Ativa
Registra usu√°rios existentes na competi√ß√£o ativa atual
"""

import sys
import os
from datetime import datetime

# Adicionar src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from database.models import DatabaseManager
from config.settings import settings

class CorrecaoRegistroUsuario:
    def __init__(self):
        self.db = DatabaseManager()
        
    def registrar_usuario_na_competicao(self, user_id: int):
        """Registra usu√°rio na competi√ß√£o ativa"""
        print(f"üîß REGISTRANDO USU√ÅRIO {user_id} NA COMPETI√á√ÉO ATIVA")
        print("=" * 60)
        
        try:
            # 1. Verificar se usu√°rio existe
            user = self.db.get_user(user_id)
            if not user:
                print(f"   ‚ùå Usu√°rio {user_id} n√£o encontrado no sistema")
                return False
                
            print(f"   üë§ Usu√°rio: {user.first_name} (ID: {user.user_id})")
            
            # 2. Verificar competi√ß√£o ativa
            active_competition = self.db.get_active_competition()
            if not active_competition:
                print("   ‚ùå Nenhuma competi√ß√£o ativa encontrada")
                return False
                
            print(f"   üèÜ Competi√ß√£o ativa: {active_competition.name}")
            
            # 3. Verificar se j√° est√° registrado
            user_stats = self.db.get_user_competition_stats(active_competition.id, user_id)
            if user_stats:
                print(f"   ‚ÑπÔ∏è Usu√°rio j√° est√° registrado com {user_stats['invites_count']} convites")
                return True
            
            # 4. Registrar usu√°rio na competi√ß√£o
            print("   üîß Registrando usu√°rio na competi√ß√£o...")
            
            # Usar m√©todo interno do DatabaseManager para registrar participante
            participant = self.db.add_competition_participant(active_competition.id, user_id)
            
            if participant:
                print("   ‚úÖ Usu√°rio registrado com sucesso na competi√ß√£o!")
                
                # Verificar registro
                user_stats = self.db.get_user_competition_stats(active_competition.id, user_id)
                if user_stats:
                    print(f"   üìä Convites na competi√ß√£o: {user_stats['invites_count']}")
                
                return True
            else:
                print("   ‚ùå Falha ao registrar usu√°rio na competi√ß√£o")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erro durante registro: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def sincronizar_convites_usuario(self, user_id: int):
        """Sincroniza convites do usu√°rio com a competi√ß√£o"""
        print(f"\nüîÑ SINCRONIZANDO CONVITES DO USU√ÅRIO {user_id}")
        print("=" * 50)
        
        try:
            # Verificar competi√ß√£o ativa
            active_competition = self.db.get_active_competition()
            if not active_competition:
                return False
            
            # Verificar se usu√°rio tem links com usos
            user_link = self.db.get_user_invite_link(user_id, active_competition.id)
            if user_link and user_link.get('current_uses', 0) > 0:
                print(f"   üîó Link encontrado: {user_link['current_uses']} usos")
                
                # Atualizar contadores na competi√ß√£o
                self.db.update_participant_invites(active_competition.id, user_id, user_link['current_uses'])
                print(f"   ‚úÖ Convites sincronizados: {user_link['current_uses']}")
                return True
            else:
                print("   ‚ÑπÔ∏è Nenhum convite para sincronizar")
                return True
                
        except Exception as e:
            print(f"   ‚ùå Erro durante sincroniza√ß√£o: {e}")
            return False
    
    def verificar_resultado(self, user_id: int):
        """Verifica se a corre√ß√£o funcionou"""
        print(f"\n‚úÖ VERIFICANDO RESULTADO PARA USU√ÅRIO {user_id}")
        print("=" * 50)
        
        try:
            active_competition = self.db.get_active_competition()
            if not active_competition:
                return False
            
            # Verificar estat√≠sticas do usu√°rio na competi√ß√£o
            user_stats = self.db.get_user_competition_stats(active_competition.id, user_id)
            if user_stats:
                print(f"   ‚úÖ Usu√°rio registrado na competi√ß√£o")
                print(f"   üìä Convites na competi√ß√£o: {user_stats['invites_count']}")
                
                # Verificar ranking
                ranking = self.db.get_competition_ranking(active_competition.id, limit=10)
                user_position = None
                
                for i, participant in enumerate(ranking, 1):
                    if participant['user_id'] == user_id:
                        user_position = i
                        break
                
                if user_position:
                    print(f"   üèÖ Posi√ß√£o no ranking: {user_position}¬∫")
                else:
                    print(f"   üìä N√£o est√° no TOP 10 ainda")
                
                return True
            else:
                print(f"   ‚ùå Usu√°rio ainda n√£o est√° na competi√ß√£o")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erro durante verifica√ß√£o: {e}")
            return False

if __name__ == "__main__":
    try:
        # ID do Fernando (admin principal)
        fernando_user_id = 7874182984
        
        correcao = CorrecaoRegistroUsuario()
        
        # 1. Registrar usu√°rio na competi√ß√£o
        sucesso_registro = correcao.registrar_usuario_na_competicao(fernando_user_id)
        
        if sucesso_registro:
            # 2. Sincronizar convites
            correcao.sincronizar_convites_usuario(fernando_user_id)
            
            # 3. Verificar resultado
            sucesso_final = correcao.verificar_resultado(fernando_user_id)
            
            if sucesso_final:
                print("\nüéâ CORRE√á√ÉO APLICADA COM SUCESSO!")
                print("   ‚Ä¢ Usu√°rio registrado na competi√ß√£o")
                print("   ‚Ä¢ Convites sincronizados")
                print("   ‚Ä¢ Ranking atualizado")
                print("\nüí° Teste agora: /ranking no Telegram")
            else:
                print("\n‚ùå CORRE√á√ÉO PARCIAL - VERIFICAR MANUALMENTE")
        else:
            print("\n‚ùå FALHA NA CORRE√á√ÉO - VERIFICAR LOGS")
            
    except KeyboardInterrupt:
        print("\nüõë Corre√ß√£o interrompida")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Erro fatal: {e}")
        sys.exit(1)

