#!/bin/bash

# Script para Corrigir VPS Atual
# Atualiza reposit√≥rio e corrige problemas identificados
# Autor: Manus AI

echo "üîß CORRE√á√ÉO DA VPS ATUAL"
echo "========================"
echo "üéØ Corrigindo problemas identificados"
echo "‚è±Ô∏è  $(date)"
echo "========================"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "main.py" ]; then
    log_error "Execute este script no diret√≥rio do projeto (/root/telegram-invite-bot)"
    exit 1
fi

echo "üîÑ PASSO 1: Parar servi√ßo atual"
echo "==============================="

log_info "Parando servi√ßo telegram-bot..."
systemctl stop telegram-bot 2>/dev/null || true
log_success "Servi√ßo parado"

echo ""
echo "üì• PASSO 2: Atualizar reposit√≥rio"
echo "================================="

log_info "Fazendo backup das configura√ß√µes locais..."
if [ -f ".env" ]; then
    cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
    log_success "Backup do .env criado"
fi

log_info "Atualizando reposit√≥rio do GitHub..."
git fetch origin
git reset --hard origin/main
git pull origin main

if [ $? -eq 0 ]; then
    log_success "Reposit√≥rio atualizado com sucesso"
else
    log_error "Erro ao atualizar reposit√≥rio"
    exit 1
fi

# Restaurar .env se foi feito backup
if [ -f ".env.backup."* ]; then
    LATEST_BACKUP=$(ls -t .env.backup.* | head -1)
    cp "$LATEST_BACKUP" .env
    log_success "Configura√ß√µes .env restauradas"
fi

echo ""
echo "üêç PASSO 3: Atualizar ambiente Python"
echo "======================================"

log_info "Ativando ambiente virtual..."
if [ -d "venv" ]; then
    source venv/bin/activate
    log_success "Ambiente virtual ativado"
else
    log_info "Criando ambiente virtual..."
    python3 -m venv venv
    source venv/bin/activate
    log_success "Ambiente virtual criado e ativado"
fi

log_info "Atualizando depend√™ncias..."
pip install --upgrade pip
pip install -r requirements.txt
pip install -r requirements_postgresql.txt 2>/dev/null || true

# Instalar depend√™ncias PostgreSQL se n√£o estiverem
pip install psycopg2-binary sqlalchemy asyncpg 2>/dev/null || true

log_success "Depend√™ncias atualizadas"

echo ""
echo "‚öôÔ∏è PASSO 4: Verificar configura√ß√µes"
echo "==================================="

log_info "Verificando arquivo .env..."
if [ -f ".env" ]; then
    log_success "Arquivo .env existe"
    
    # Verificar vari√°veis essenciais
    if grep -q "BOT_TOKEN=" .env && grep -q "CHAT_ID=" .env; then
        log_success "Configura√ß√µes b√°sicas encontradas"
    else
        log_warning "Algumas configura√ß√µes podem estar ausentes"
    fi
else
    log_error "Arquivo .env n√£o encontrado"
    exit 1
fi

echo ""
echo "üß™ PASSO 5: Testar sistema"
echo "=========================="

log_info "Testando importa√ß√µes Python..."
python3 -c "
import sys
sys.path.insert(0, 'src')
try:
    from src.config.settings import settings
    print('‚úÖ Configura√ß√µes carregadas')
except Exception as e:
    print(f'‚ùå Erro: {e}')
    sys.exit(1)
"

if [ $? -eq 0 ]; then
    log_success "Configura√ß√µes Python OK"
else
    log_error "Erro nas configura√ß√µes Python"
    exit 1
fi

echo ""
echo "üîß PASSO 6: Configurar servi√ßo systemd"
echo "======================================"

log_info "Verificando servi√ßo systemd..."
if [ -f "/etc/systemd/system/telegram-bot.service" ]; then
    log_success "Arquivo de servi√ßo existe"
else
    log_info "Criando arquivo de servi√ßo..."
    cat > /etc/systemd/system/telegram-bot.service << EOF
[Unit]
Description=Telegram Invite Bot with PostgreSQL and Anti-Fraud System
After=network.target postgresql.service
Requires=postgresql.service
Wants=network-online.target

[Service]
Type=simple
User=root
Group=root
WorkingDirectory=/root/telegram-invite-bot
Environment=PATH=/usr/bin:/usr/local/bin:/root/telegram-invite-bot/venv/bin
Environment=PYTHONPATH=/root/telegram-invite-bot
Environment=PYTHONUNBUFFERED=1
ExecStartPre=/bin/sleep 10
ExecStart=/root/telegram-invite-bot/venv/bin/python main.py
Restart=always
RestartSec=15
StandardOutput=journal
StandardError=journal
SyslogIdentifier=telegram-bot

# Limites de recursos para 50k+ usu√°rios
LimitNOFILE=65536
LimitNPROC=8192
LimitMEMLOCK=infinity

# Configura√ß√µes de seguran√ßa
NoNewPrivileges=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=/root/telegram-invite-bot
PrivateTmp=true

[Install]
WantedBy=multi-user.target
EOF
    log_success "Arquivo de servi√ßo criado"
fi

# Recarregar systemd
systemctl daemon-reload
log_success "Systemd recarregado"

echo ""
echo "üöÄ PASSO 7: Iniciar servi√ßos"
echo "============================"

log_info "Habilitando servi√ßo..."
systemctl enable telegram-bot
log_success "Servi√ßo habilitado"

log_info "Iniciando servi√ßo..."
systemctl start telegram-bot

# Aguardar inicializa√ß√£o
sleep 10

# Verificar status
if systemctl is-active --quiet telegram-bot; then
    log_success "Servi√ßo iniciado com sucesso"
    
    log_info "Status do servi√ßo:"
    systemctl status telegram-bot --no-pager -l
    
else
    log_error "Falha ao iniciar servi√ßo"
    log_error "Logs de erro:"
    journalctl -u telegram-bot --no-pager -n 20
fi

echo ""
echo "üîç PASSO 8: Executar verifica√ß√£o completa"
echo "========================================="

if [ -f "VERIFICAR_DEPLOY_SUCESSO.sh" ]; then
    log_info "Executando verifica√ß√£o completa..."
    chmod +x VERIFICAR_DEPLOY_SUCESSO.sh
    ./VERIFICAR_DEPLOY_SUCESSO.sh
else
    log_warning "Script de verifica√ß√£o n√£o encontrado"
    log_info "Fazendo verifica√ß√£o b√°sica..."
    
    echo "=== VERIFICA√á√ÉO B√ÅSICA ==="
    echo "Bot: $(systemctl is-active telegram-bot)"
    echo "PostgreSQL: $(systemctl is-active postgresql 2>/dev/null || echo 'n√£o instalado')"
    echo "Logs recentes:"
    journalctl -u telegram-bot --no-pager -n 5
fi

echo ""
echo "üìä RESUMO FINAL"
echo "==============="

BOT_STATUS=$(systemctl is-active telegram-bot)
echo "ü§ñ Status do Bot: $BOT_STATUS"

if [ "$BOT_STATUS" = "active" ]; then
    echo -e "${GREEN}‚úÖ CORRE√á√ÉO BEM-SUCEDIDA!${NC}"
    echo "üöÄ Bot est√° rodando normalmente"
    echo ""
    echo "üìû COMANDOS √öTEIS:"
    echo "‚Ä¢ Ver logs: journalctl -u telegram-bot -f"
    echo "‚Ä¢ Status: systemctl status telegram-bot"
    echo "‚Ä¢ Reiniciar: systemctl restart telegram-bot"
    echo "‚Ä¢ Verifica√ß√£o: ./VERIFICAR_DEPLOY_SUCESSO.sh"
else
    echo -e "${RED}‚ùå CORRE√á√ÉO FALHOU${NC}"
    echo "üîß Verifique os logs para mais detalhes:"
    echo "journalctl -u telegram-bot -n 50"
fi

echo ""
echo "üìÖ Corre√ß√£o conclu√≠da em: $(date)"
echo "================================="
EOF

