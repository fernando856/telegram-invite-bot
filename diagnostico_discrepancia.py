#!/usr/bin/env python3
"""
Script para Diagnosticar Discrep√¢ncia entre Estat√≠sticas e Ranking
Investiga por que as estat√≠sticas mostram convites mas o ranking n√£o
"""

import asyncio
import sys
import os
from datetime import datetime

# Adicionar src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from database.models import DatabaseManager
from config.settings import settings

class DiagnosticoDiscrepancia:
    def __init__(self):
        self.db = DatabaseManager()
        
    def investigar_discrepancia(self):
        """Investiga a discrep√¢ncia entre estat√≠sticas e ranking"""
        print("üîç DIAGN√ìSTICO DE DISCREP√ÇNCIA - ESTAT√çSTICAS vs RANKING")
        print("=" * 70)
        
        try:
            # 1. Verificar competi√ß√£o ativa
            print("\n1Ô∏è‚É£ VERIFICANDO COMPETI√á√ÉO ATIVA:")
            active_competition = self.db.get_active_competition()
            
            if not active_competition:
                print("   ‚ùå PROBLEMA: Nenhuma competi√ß√£o ativa encontrada!")
                print("   üí° Isso explica por que o ranking est√° vazio")
                return False
                
            print(f"   ‚úÖ Competi√ß√£o ativa: {active_competition.name}")
            print(f"   üìÖ In√≠cio: {active_competition.start_date}")
            print(f"   üìÖ Fim: {active_competition.end_date}")
            print(f"   üéØ Meta: {active_competition.target_invites:,} convites")
            
            # 2. Verificar estat√≠sticas da competi√ß√£o
            print(f"\n2Ô∏è‚É£ VERIFICANDO ESTAT√çSTICAS DA COMPETI√á√ÉO:")
            stats = self.db.get_competition_stats(active_competition.id)
            print(f"   üìä Total de participantes: {stats['total_participants']}")
            print(f"   üìà Total de convites: {stats['total_invites']}")
            
            # 3. Verificar ranking da competi√ß√£o
            print(f"\n3Ô∏è‚É£ VERIFICANDO RANKING DA COMPETI√á√ÉO:")
            ranking = self.db.get_competition_ranking(active_competition.id, limit=20)
            print(f"   üèÖ Participantes no ranking: {len(ranking)}")
            
            if not ranking:
                print("   ‚ùå PROBLEMA: Ranking vazio!")
                print("   üí° Isso explica a mensagem 'Ainda n√£o h√° participantes'")
            else:
                for i, participant in enumerate(ranking, 1):
                    print(f"   {i}¬∫ - {participant['first_name']}: {participant['invites_count']} convites")
            
            # 4. Investigar usu√°rio espec√≠fico (Fernando)
            print(f"\n4Ô∏è‚É£ INVESTIGANDO USU√ÅRIO ESPEC√çFICO:")
            # Tentar encontrar o usu√°rio Fernando
            fernando_user = None
            
            # Como n√£o temos get_all_users, vamos tentar IDs comuns
            possible_user_ids = [7874182984, 6440447977, 381199906]  # IDs dos admins
            
            for user_id in possible_user_ids:
                user = self.db.get_user(user_id)
                if user and user.first_name and 'Fernando' in user.first_name:
                    fernando_user = user
                    break
            
            if fernando_user:
                print(f"   üë§ Usu√°rio encontrado: {fernando_user.first_name} (ID: {fernando_user.user_id})")
                print(f"   üìà Total de convites no perfil: {fernando_user.total_invites}")
                
                # Verificar se est√° na competi√ß√£o
                user_stats = self.db.get_user_competition_stats(active_competition.id, fernando_user.user_id)
                if user_stats:
                    print(f"   ‚úÖ Est√° na competi√ß√£o com {user_stats['invites_count']} convites")
                else:
                    print(f"   ‚ùå N√ÉO est√° registrado na competi√ß√£o ativa!")
                    print(f"   üí° Isso explica a discrep√¢ncia!")
                
                # Verificar links do usu√°rio
                user_link = self.db.get_user_invite_link(fernando_user.user_id, active_competition.id)
                if user_link:
                    print(f"   üîó Link da competi√ß√£o: {user_link['name']} - {user_link['current_uses']}/{user_link['max_uses']} usos")
                else:
                    print(f"   ‚ùå Nenhum link para a competi√ß√£o ativa")
                    
            else:
                print("   ‚ùå Usu√°rio Fernando n√£o encontrado nos IDs conhecidos")
            
            # 5. An√°lise final
            print(f"\n5Ô∏è‚É£ AN√ÅLISE FINAL:")
            
            if stats['total_invites'] > 0 and len(ranking) == 0:
                print("   ‚ùå PROBLEMA CONFIRMADO:")
                print("   ‚Ä¢ Estat√≠sticas mostram convites registrados")
                print("   ‚Ä¢ Mas ranking est√° vazio")
                print("   ‚Ä¢ Usu√°rios n√£o est√£o sendo registrados na competi√ß√£o")
                return False
            elif stats['total_invites'] == 0 and len(ranking) == 0:
                print("   ‚ÑπÔ∏è Situa√ß√£o normal: Nenhum convite registrado ainda")
                return True
            else:
                print("   ‚úÖ Sistema sincronizado corretamente")
                return True
                
        except Exception as e:
            print(f"   ‚ùå Erro durante diagn√≥stico: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def sugerir_correcoes(self):
        """Sugere corre√ß√µes para o problema"""
        print("\nüîß SUGEST√ïES DE CORRE√á√ÉO:")
        print("=" * 40)
        
        print("1. Registrar usu√°rios na competi√ß√£o ativa")
        print("2. Sincronizar contadores de convites")
        print("3. Verificar processo de novos membros")
        print("4. Atualizar ranking com dados corretos")

if __name__ == "__main__":
    try:
        diagnostico = DiagnosticoDiscrepancia()
        sucesso = diagnostico.investigar_discrepancia()
        
        if not sucesso:
            diagnostico.sugerir_correcoes()
            print("\n‚ùå DISCREP√ÇNCIA IDENTIFICADA - CORRE√á√ÉO NECESS√ÅRIA")
            sys.exit(1)
        else:
            print("\n‚úÖ SISTEMA SINCRONIZADO CORRETAMENTE")
            
    except KeyboardInterrupt:
        print("\nüõë Diagn√≥stico interrompido")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Erro fatal: {e}")
        sys.exit(1)

