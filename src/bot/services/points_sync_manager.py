"""
Gerenciador de Sincroniza√ß√£o de Pontos
Respons√°vel por manter pontos da competi√ß√£o sincronizados com usos reais dos links
"""
import logging
from typing import Dict, List, Optional
from datetime import datetime

logger = logging.getLogger(__name__)

class PointsSyncManager:
    """Gerencia sincroniza√ß√£o entre usos de links e pontos da competi√ß√£o"""
    
    def __init__(self, db_manager):
        self.db = db_manager
        
    def sync_user_points(self, user_id: int, competition_id: int) -> bool:
        """Sincroniza pontos de um usu√°rio espec√≠fico com seus links"""
        try:
            # Calcular total de usos dos links do usu√°rio na competi√ß√£o
            with self.db.get_connection() as conn:
                result = conn.execute("""
                    SELECT COALESCE(SUM(uses), 0) as total_uses
                    FROM invite_links 
                    WHERE user_id = ? AND competition_id = ?
                """, (user_id, competition_id)).fetchone()
                
                total_uses = result['total_uses'] if result else 0
                
                # Buscar data do √∫ltimo convite real
                last_invite_result = conn.execute("""
                    SELECT MAX(created_at) as last_invite
                    FROM invite_links 
                    WHERE user_id = ? AND competition_id = ? AND uses > 0
                """, (user_id, competition_id)).fetchone()
                
                last_invite_date = last_invite_result['last_invite'] if last_invite_result and last_invite_result['last_invite'] else None
                
                # Atualizar pontos na competi√ß√£o
                if last_invite_date:
                    updated = conn.execute("""
                        UPDATE competition_participants 
                        SET invites_count = ?, last_invite_at = ?
                        WHERE competition_id = ? AND user_id = ?
                    """, (total_uses, last_invite_date, competition_id, user_id))
                else:
                    updated = conn.execute("""
                        UPDATE competition_participants 
                        SET invites_count = ?
                        WHERE competition_id = ? AND user_id = ?
                    """, (total_uses, competition_id, user_id))
                
                conn.commit()
                
                if updated.rowcount > 0:
                    logger.info(f"‚úÖ Pontos sincronizados: usu√°rio {user_id} = {total_uses} pontos")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è Usu√°rio {user_id} n√£o encontrado na competi√ß√£o {competition_id}")
                    return False
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao sincronizar pontos do usu√°rio {user_id}: {e}")
            return False
    
    def sync_all_competition_points(self, competition_id: int) -> Dict[str, int]:
        """Sincroniza pontos de todos os participantes da competi√ß√£o"""
        try:
            synced = 0
            errors = 0
            
            # Buscar todos os participantes
            with self.db.get_connection() as conn:
                participants = conn.execute("""
                    SELECT DISTINCT user_id 
                    FROM competition_participants 
                    WHERE competition_id = ?
                """, (competition_id,)).fetchall()
                
                logger.info(f"üîÑ Sincronizando {len(participants)} participantes da competi√ß√£o {competition_id}")
                
                for participant in participants:
                    user_id = participant['user_id']
                    
                    if self.sync_user_points(user_id, competition_id):
                        synced += 1
                    else:
                        errors += 1
                
                # Atualizar posi√ß√µes no ranking
                self._update_ranking_positions(competition_id)
                
                logger.info(f"‚úÖ Sincroniza√ß√£o conclu√≠da: {synced} sucessos, {errors} erros")
                
                return {
                    'synced': synced,
                    'errors': errors,
                    'total': len(participants)
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro na sincroniza√ß√£o geral da competi√ß√£o {competition_id}: {e}")
            return {'synced': 0, 'errors': 1, 'total': 0}
    
    def _update_ranking_positions(self, competition_id: int):
        """Atualiza posi√ß√µes no ranking ap√≥s sincroniza√ß√£o"""
        try:
            with self.db.get_connection() as conn:
                # Atualizar posi√ß√µes baseado em invites_count
                conn.execute("""
                    UPDATE competition_participants 
                    SET position = (
                        SELECT COUNT(*) + 1 
                        FROM competition_participants cp2 
                        WHERE cp2.competition_id = competition_participants.competition_id 
                        AND cp2.invites_count > competition_participants.invites_count
                    )
                    WHERE competition_id = ?
                """, (competition_id,))
                
                conn.commit()
                logger.info(f"‚úÖ Posi√ß√µes do ranking atualizadas para competi√ß√£o {competition_id}")
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao atualizar posi√ß√µes do ranking: {e}")
    
    def get_sync_report(self, competition_id: int) -> Dict:
        """Gera relat√≥rio de sincroniza√ß√£o para diagn√≥stico"""
        try:
            with self.db.get_connection() as conn:
                # Dados dos participantes
                participants = conn.execute("""
                    SELECT cp.user_id, cp.invites_count, u.first_name, u.username
                    FROM competition_participants cp
                    LEFT JOIN users u ON cp.user_id = u.user_id
                    WHERE cp.competition_id = ?
                    ORDER BY cp.invites_count DESC
                """, (competition_id,)).fetchall()
                
                # Dados dos links
                links = conn.execute("""
                    SELECT user_id, SUM(COALESCE(uses, 0)) as total_uses
                    FROM invite_links 
                    WHERE competition_id = ?
                    GROUP BY user_id
                    ORDER BY total_uses DESC
                """, (competition_id,)).fetchall()
                
                # Criar mapeamentos
                participant_points = {p['user_id']: p['invites_count'] for p in participants}
                link_uses = {l['user_id']: l['total_uses'] for l in links}
                
                # Identificar discrep√¢ncias
                discrepancies = []
                all_users = set(participant_points.keys()) | set(link_uses.keys())
                
                for user_id in all_users:
                    points = participant_points.get(user_id, 0)
                    uses = link_uses.get(user_id, 0)
                    
                    if points != uses:
                        # Buscar nome do usu√°rio
                        user_info = next((p for p in participants if p['user_id'] == user_id), None)
                        name = "Desconhecido"
                        if user_info:
                            name = user_info['first_name'] or user_info['username'] or f"ID:{user_id}"
                        
                        discrepancies.append({
                            'user_id': user_id,
                            'name': name,
                            'points': points,
                            'uses': uses,
                            'difference': uses - points
                        })
                
                return {
                    'competition_id': competition_id,
                    'total_participants': len(participants),
                    'total_links': len(links),
                    'discrepancies': discrepancies,
                    'sync_needed': len(discrepancies) > 0
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar relat√≥rio de sincroniza√ß√£o: {e}")
            return {'error': str(e)}
    
    def auto_sync_on_new_member(self, user_id: int, invite_link: str) -> bool:
        """Sincroniza√ß√£o autom√°tica quando novo membro entra"""
        try:
            # Buscar competition_id do link
            with self.db.get_connection() as conn:
                link_info = conn.execute("""
                    SELECT user_id as inviter_id, competition_id 
                    FROM invite_links 
                    WHERE invite_link = ? AND competition_id IS NOT NULL
                """, (invite_link,)).fetchone()
                
                if not link_info:
                    logger.warning(f"Link n√£o encontrado ou sem competition_id: {invite_link}")
                    return False
                
                inviter_id = link_info['inviter_id']
                competition_id = link_info['competition_id']
                
                # Sincronizar pontos do usu√°rio que fez o convite
                success = self.sync_user_points(inviter_id, competition_id)
                
                if success:
                    logger.info(f"üîÑ Auto-sincroniza√ß√£o: usu√°rio {inviter_id} na competi√ß√£o {competition_id}")
                
                return success
                
        except Exception as e:
            logger.error(f"‚ùå Erro na auto-sincroniza√ß√£o: {e}")
            return False

