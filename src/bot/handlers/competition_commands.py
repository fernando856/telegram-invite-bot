"""
Handlers de Comandos da Competi√ß√£o
"""
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, ConversationHandler, MessageHandler, filters
from telegram.error import TelegramError

from src.config.settings import settings
from src.database.models import DatabaseManager
from src.bot.services.competition_manager import CompetitionManager
import logging

logger = logging.getLogger(__name__)

# Estados da conversa para criar competi√ß√£o
COMPETITION_NAME, COMPETITION_DESCRIPTION, COMPETITION_DURATION, COMPETITION_TARGET = range(4)

class CompetitionHandlers:
    def __init__(self, db_manager: DatabaseManager, competition_manager: CompetitionManager):
        self.db = db_manager
        self.comp_manager = competition_manager
    
    async def competition_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /competicao - Mostra status da competi√ß√£o atual"""
        try:
            active_comp = self.comp_manager.get_active_competition()
            
            if not active_comp:
                await update.message.reply_text(
                    "üî¥ **Nenhuma competi√ß√£o ativa no momento.**\n\n"
                    "Aguarde o pr√≥ximo desafio! üöÄ",
                    parse_mode='Markdown'
                )
                return
            
            status = self.comp_manager.get_competition_status(active_comp.id)
            
            if not status:
                await update.message.reply_text("‚ùå Erro ao buscar status da competi√ß√£o.")
                return
            
            # Formatar tempo restante
            time_left = status['time_left']
            if time_left.total_seconds() > 0:
                days = time_left.days
                hours, remainder = divmod(time_left.seconds, 3600)
                minutes, _ = divmod(remainder, 60)
                time_str = f"{days}d, {hours}h, {minutes}min"
            else:
                time_str = "Tempo esgotado!"
            
            # Buscar l√≠der atual
            top_3 = status['top_3']
            leader_text = "Nenhum l√≠der ainda"
            if top_3:
                leader = top_3[0]
                username = leader['username'] or leader['first_name'] or f"Usu√°rio {leader['user_id']}"
                leader_text = f"@{username} ({leader['invites_count']:,} pontos)"
            
            # Buscar performance do usu√°rio
            user_perf = self.comp_manager.get_user_performance(active_comp.id, update.effective_user.id)
            
            if user_perf.get('is_participant'):
                user_text = f"üìä Seu desempenho: {user_perf['invites_count']:,} pontos (posi√ß√£o #{user_perf['position']})"
            else:
                user_text = "üìä Voc√™ ainda n√£o est√° participando. Use /meulink para come√ßar!"
            
            message = f"""
üèÜ **COMPETI√á√ÉO ATIVA: "{active_comp.name}"**

{active_comp.description or ''}

‚è∞ **Tempo restante:** {time_str}
üéØ **Meta:** {active_comp.target_invites:,} convidados
üëë **L√≠der atual:** {leader_text}
üë• **Participantes:** {status['stats']['total_participants']:,}

{user_text}

üîó Use /meulink para gerar seu link de convite!
üìä Use /ranking para ver o top 10 atual.
üìà Use /meudesempenho para ver suas estat√≠sticas.
            """.strip()
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Erro no comando /competicao: {e}")
            await update.message.reply_text("‚ùå Erro ao buscar informa√ß√µes da competi√ß√£o.")
    
    async def user_performance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /meudesempenho - Mostra performance do usu√°rio"""
        try:
            active_comp = self.comp_manager.get_active_competition()
            
            if not active_comp:
                await update.message.reply_text(
                    "üî¥ **Nenhuma competi√ß√£o ativa no momento.**\n\n"
                    "Aguarde o pr√≥ximo desafio! üöÄ",
                    parse_mode='Markdown'
                )
                return
            
            user_perf = self.comp_manager.get_user_performance(active_comp.id, update.effective_user.id)
            
            if not user_perf.get('is_participant'):
                await update.message.reply_text(
                    "üìä **Voc√™ ainda n√£o est√° participando da competi√ß√£o.**\n\n"
                    "Use /meulink para gerar seu primeiro link e come√ßar a competir! üöÄ",
                    parse_mode='Markdown'
                )
                return
            
            # Calcular tempo restante
            now = datetime.now(settings.timezone).replace(tzinfo=None)
            time_left = active_comp.end_date - now if active_comp.end_date > now else timedelta(0)
            
            # Calcular proje√ß√£o
            days_remaining = max(1, time_left.days)
            projected_total = user_perf['invites_count'] + (user_perf['avg_per_day'] * days_remaining)
            
            message = f"""
üìä **SEU DESEMPENHO NA COMPETI√á√ÉO**

üèÜ **Competi√ß√£o:** "{active_comp.name}"
üìà **Seus pontos:** {user_perf['invites_count']:,}
üìç **Sua posi√ß√£o:** #{user_perf['position']} de {user_perf['total_participants']:,} participantes
üéØ **Faltam:** {user_perf['remaining_to_target']:,} pontos para a meta

üìä **Estat√≠sticas:**
‚Ä¢ M√©dia por dia: {user_perf['avg_per_day']:.1f} convites
‚Ä¢ Proje√ß√£o final: {projected_total:.0f} convites
‚Ä¢ √öltimo convite: {user_perf['last_invite_at'] or 'Nunca'}

üöÄ **Continue convidando para subir no ranking!**
Use /meulink para gerar novos links de convite.
            """.strip()
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Erro no comando /meudesempenho: {e}")
            await update.message.reply_text("‚ùå Erro ao buscar suas estat√≠sticas.")
    
    async def competition_ranking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /ranking - Mostra ranking da competi√ß√£o"""
        try:
            active_comp = self.comp_manager.get_active_competition()
            
            if not active_comp:
                await update.message.reply_text(
                    "üî¥ **Nenhuma competi√ß√£o ativa no momento.**\n\n"
                    "Aguarde o pr√≥ximo desafio! üöÄ",
                    parse_mode='Markdown'
                )
                return
            
            ranking = self.db.get_competition_ranking(active_comp.id, limit=10)
            
            if not ranking:
                await update.message.reply_text(
                    "üìä **Ainda n√£o h√° participantes na competi√ß√£o.**\n\n"
                    "Seja o primeiro! Use /meulink para come√ßar. üöÄ",
                    parse_mode='Markdown'
                )
                return
            
            # Calcular tempo restante
            now = datetime.now(settings.timezone).replace(tzinfo=None)
            time_left = active_comp.end_date - now if active_comp.end_date > now else timedelta(0)
            
            if time_left.total_seconds() > 0:
                days = time_left.days
                hours, remainder = divmod(time_left.seconds, 3600)
                minutes, _ = divmod(remainder, 60)
                time_str = f"{days}d, {hours}h, {minutes}min"
            else:
                time_str = "Tempo esgotado!"
            
            message = f"""
üèÜ **TOP 10 - {active_comp.name.upper()}**

"""
            
            # Adicionar ranking
            medals = ['ü•á', 'ü•à', 'ü•â'] + ['üèÖ'] * 7
            for i, participant in enumerate(ranking):
                username = participant['username'] or participant['first_name'] or f"Usu√°rio {participant['user_id']}"
                message += f"{medals[i]} **@{username}** - {participant['invites_count']:,} pontos\n"
            
            message += f"""
‚è∞ **Tempo restante:** {time_str}
üéØ **Meta para vit√≥ria:** {active_comp.target_invites:,} pontos

"""
            
            # Adicionar posi√ß√£o do usu√°rio se n√£o estiver no top 10
            user_perf = self.comp_manager.get_user_performance(active_comp.id, update.effective_user.id)
            if user_perf.get('is_participant') and user_perf['position'] > 10:
                message += f"Sua posi√ß√£o: #{user_perf['position']} ({user_perf['invites_count']:,} pontos)"
            elif not user_perf.get('is_participant'):
                message += "Use /meulink para participar da competi√ß√£o!"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Erro no comando /ranking: {e}")
            await update.message.reply_text("‚ùå Erro ao buscar ranking da competi√ß√£o.")
    
    # Comandos administrativos
    async def start_create_competition(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /iniciar_competicao - Inicia processo de cria√ß√£o"""
        user_id = update.effective_user.id
        
        if user_id not in settings.admin_ids_list:
            await update.message.reply_text("‚ùå Apenas administradores podem criar competi√ß√µes.")
            return ConversationHandler.END
        
        # Verificar se j√° existe competi√ß√£o ativa
        active_comp = self.comp_manager.get_active_competition()
        if active_comp:
            await update.message.reply_text(
                f"‚ö†Ô∏è **J√° existe uma competi√ß√£o ativa:** \"{active_comp.name}\"\n\n"
                "Finalize-a primeiro com /finalizar_competicao",
                parse_mode='Markdown'
            )
            return ConversationHandler.END
        
        await update.message.reply_text(
            "üèÜ **Criando nova competi√ß√£o!**\n\n"
            "üìù Digite o nome da competi√ß√£o:",
            parse_mode='Markdown'
        )
        
        return COMPETITION_NAME
    
    async def get_competition_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Recebe o nome da competi√ß√£o"""
        name = update.message.text.strip()
        
        if len(name) < 3:
            await update.message.reply_text("‚ùå Nome muito curto. Digite pelo menos 3 caracteres:")
            return COMPETITION_NAME
        
        if len(name) > 100:
            await update.message.reply_text("‚ùå Nome muito longo. Digite no m√°ximo 100 caracteres:")
            return COMPETITION_NAME
        
        context.user_data['competition_name'] = name
        
        await update.message.reply_text(
            f"‚úÖ **Nome:** {name}\n\n"
            "üìù Digite uma descri√ß√£o (opcional) ou envie /pular:",
            parse_mode='Markdown'
        )
        
        return COMPETITION_DESCRIPTION
    
    async def get_competition_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Recebe a descri√ß√£o da competi√ß√£o"""
        description = None
        
        if update.message.text.strip() != '/pular':
            description = update.message.text.strip()
            if len(description) > 500:
                await update.message.reply_text("‚ùå Descri√ß√£o muito longa. Digite no m√°ximo 500 caracteres:")
                return COMPETITION_DESCRIPTION
        
        context.user_data['competition_description'] = description
        
        await update.message.reply_text(
            f"‚úÖ **Descri√ß√£o:** {description or 'Sem descri√ß√£o'}\n\n"
            "‚è∞ **Digite a dura√ß√£o da competi√ß√£o em dias** (1-30):\n"
            "Exemplo: 7 (para 7 dias)",
            parse_mode='Markdown'
        )
        
        return COMPETITION_DURATION
    
    async def get_competition_duration(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Recebe a dura√ß√£o da competi√ß√£o"""
        try:
            duration = int(update.message.text.strip())
            
            if duration < 1 or duration > 30:
                await update.message.reply_text("‚ùå Dura√ß√£o deve ser entre 1 e 30 dias. Digite novamente:")
                return COMPETITION_DURATION
            
            context.user_data['competition_duration'] = duration
            
            await update.message.reply_text(
                f"‚úÖ **Dura√ß√£o:** {duration} dias\n\n"
                "üéØ **Digite a meta de convidados** (100-50000):\n"
                "Exemplo: 5000 (para 5.000 convidados)",
                parse_mode='Markdown'
            )
            
            return COMPETITION_TARGET
            
        except ValueError:
            await update.message.reply_text("‚ùå Digite apenas n√∫meros. Exemplo: 7")
            return COMPETITION_DURATION
    
    async def get_competition_target(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Recebe a meta de convidados e cria a competi√ß√£o"""
        try:
            target = int(update.message.text.strip())
            
            if target < 100 or target > 50000:
                await update.message.reply_text("‚ùå Meta deve ser entre 100 e 50.000 convidados. Digite novamente:")
                return COMPETITION_TARGET
            
            # Criar competi√ß√£o com configura√ß√µes personalizadas
            competition = self.comp_manager.create_competition(
                name=context.user_data['competition_name'],
                description=context.user_data['competition_description'],
                duration_days=context.user_data['competition_duration'],
                target_invites=target,
                admin_user_id=update.effective_user.id
            )
            
            # Iniciar competi√ß√£o automaticamente
            self.comp_manager.start_competition(competition.id)
            
            # Calcular data de fim
            end_date = competition.start_date + timedelta(days=context.user_data['competition_duration'])
            end_date_str = end_date.strftime("%d/%m/%Y √†s %H:%M")
            
            await update.message.reply_text(
                f"üéâ **COMPETI√á√ÉO CRIADA E INICIADA!**\n\n"
                f"üèÜ **Nome:** {competition.name}\n"
                f"üìù **Descri√ß√£o:** {competition.description or 'Sem descri√ß√£o'}\n"
                f"‚è∞ **Dura√ß√£o:** {context.user_data['competition_duration']} dias\n"
                f"üéØ **Meta:** {target:,} convidados\n"
                f"üèÖ **Premia√ß√£o:** Top 10 participantes\n"
                f"üìÖ **T√©rmino:** {end_date_str}\n\n"
                "A competi√ß√£o j√° est√° ativa! üöÄ",
                parse_mode='Markdown'
            )
            
            # Limpar dados da conversa
            context.user_data.clear()
            
            return ConversationHandler.END
            
        except ValueError:
            await update.message.reply_text("‚ùå Digite apenas n√∫meros. Exemplo: 5000")
            return COMPETITION_TARGET
        except Exception as e:
            logger.error(f"Erro ao criar competi√ß√£o: {e}")
            await update.message.reply_text("‚ùå Erro ao criar competi√ß√£o. Tente novamente.")
            context.user_data.clear()
            return ConversationHandler.END
    
    async def cancel_create_competition(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Cancela cria√ß√£o da competi√ß√£o"""
        await update.message.reply_text("‚ùå Cria√ß√£o de competi√ß√£o cancelada.")
        return ConversationHandler.END
    
    async def finish_competition_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /finalizar_competicao - Finaliza competi√ß√£o atual"""
        user_id = update.effective_user.id
        
        if user_id not in settings.admin_ids_list:
            await update.message.reply_text("‚ùå Apenas administradores podem finalizar competi√ß√µes.")
            return
        
        active_comp = self.comp_manager.get_active_competition()
        if not active_comp:
            await update.message.reply_text("‚ùå N√£o h√° competi√ß√£o ativa para finalizar.")
            return
        
        try:
            success = self.comp_manager.finish_competition(active_comp.id, "manual")
            
            if success:
                await update.message.reply_text(
                    f"‚úÖ **Competi√ß√£o \"{active_comp.name}\" finalizada com sucesso!**\n\n"
                    "O ranking final ser√° enviado no canal em breve. üèÜ",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text("‚ùå Erro ao finalizar competi√ß√£o.")
                
        except Exception as e:
            logger.error(f"Erro ao finalizar competi√ß√£o: {e}")
            await update.message.reply_text(f"‚ùå Erro ao finalizar competi√ß√£o: {str(e)}")
    
    async def admin_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /status_admin - Status detalhado para admins"""
        user_id = update.effective_user.id
        
        if user_id not in settings.admin_ids_list:
            await update.message.reply_text("‚ùå Apenas administradores podem ver este status.")
            return
        
        try:
            active_comp = self.comp_manager.get_active_competition()
            
            if not active_comp:
                await update.message.reply_text("üî¥ **Nenhuma competi√ß√£o ativa.**")
                return
            
            status = self.comp_manager.get_competition_status(active_comp.id)
            stats = status['stats']
            
            # Calcular tempo restante
            time_left = status['time_left']
            if time_left.total_seconds() > 0:
                days = time_left.days
                hours, remainder = divmod(time_left.seconds, 3600)
                minutes, _ = divmod(remainder, 60)
                time_str = f"{days}d, {hours}h, {minutes}min"
            else:
                time_str = "Tempo esgotado!"
            
            # Calcular proje√ß√µes
            days_elapsed = (datetime.now() - active_comp.start_date).days + 1
            avg_per_day = stats['total_invites'] / days_elapsed if days_elapsed > 0 else 0
            
            message = f"""
üîß **STATUS ADMINISTRATIVO**

üèÜ **Competi√ß√£o:** {active_comp.name}
üìä **Status:** {active_comp.status.value.upper()}
‚è∞ **Tempo restante:** {time_str}

üìà **Estat√≠sticas:**
‚Ä¢ Participantes: {stats['total_participants']:,}
‚Ä¢ Total de convites: {stats['total_invites']:,}
‚Ä¢ Recorde individual: {stats['max_invites']:,}
‚Ä¢ M√©dia geral: {stats['avg_invites']:.1f}
‚Ä¢ M√©dia por dia: {avg_per_day:.1f}

üéØ **Meta:** {active_comp.target_invites:,} convites
üìä **Progresso:** {(stats['max_invites'] / active_comp.target_invites * 100):.1f}%

üõ†Ô∏è **Comandos dispon√≠veis:**
/finalizar_competicao - Finalizar manualmente
/iniciar_competicao - Criar nova competi√ß√£o
            """.strip()
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Erro no comando /status_admin: {e}")
            await update.message.reply_text("‚ùå Erro ao buscar status administrativo.")

def get_competition_handlers(db_manager: DatabaseManager, competition_manager: CompetitionManager):
    """Retorna handlers da competi√ß√£o"""
    handlers = CompetitionHandlers(db_manager, competition_manager)
    
    # Conversation handler para criar competi√ß√£o
    create_competition_handler = ConversationHandler(
        entry_points=[CommandHandler("iniciar_competicao", handlers.start_create_competition)],
        states={
            COMPETITION_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.get_competition_name)],
            COMPETITION_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.get_competition_description)],
            COMPETITION_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.get_competition_duration)],
            COMPETITION_TARGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.get_competition_target)],
        },
        fallbacks=[CommandHandler("cancelar", handlers.cancel_create_competition)],
    )
    
    return [
        # Comandos para usu√°rios
        CommandHandler("competicao", handlers.competition_status),
        CommandHandler("meudesempenho", handlers.user_performance),
        CommandHandler("ranking", handlers.competition_ranking),
        
        # Comandos administrativos
        create_competition_handler,
        CommandHandler("finalizar_competicao", handlers.finish_competition_command),
        CommandHandler("status_admin", handlers.admin_status),
    ]

