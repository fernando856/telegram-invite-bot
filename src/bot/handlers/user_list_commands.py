"""
Handlers de Comandos de Lista de Usu√°rios
"""
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler
from telegram.error import TelegramError

from src.config.settings import settings
from src.database.models import DatabaseManager
from src.bot.services.competition_manager import CompetitionManager
from src.bot.services.user_list_manager import UserListManager
import logging

logger = logging.getLogger(__name__)

class UserListHandlers:
    def __init__(self, db_manager: DatabaseManager, competition_manager: CompetitionManager):
        self.db = db_manager
        self.competition_manager = competition_manager
        self.user_list_manager = UserListManager(db_manager)
    
    async def _is_private_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """Verifica se o comando est√° sendo usado em chat privado"""
        if update.effective_chat.type != 'private':
            # Obter informa√ß√µes do bot
            try:
                bot_info = await context.bot.get_me()
                bot_username = bot_info.username
                
                await update.message.reply_text(
                    f"ü§ñ Este comando s√≥ funciona no chat privado!\n\n"
                    f"üëâ Clique aqui para usar: @{bot_username}\n\n"
                    f"üìã Comandos dispon√≠veis:\n"
                    f"‚Ä¢ /meususuarios - Ver usu√°rios que entraram pelos seus links\n"
                    f"‚Ä¢ /meulink - Gerar link de convite\n"
                    f"‚Ä¢ /meudesempenho - Ver suas estat√≠sticas"
                )
            except Exception as e:
                logger.error(f"Erro ao obter informa√ß√µes do bot: {e}")
                await update.message.reply_text(
                    "ü§ñ **Para usar comandos, acesse o bot no privado!**\n\n"
                    "üì± **Procure por:** Porteiropalpite_bot\n"
                    "‚úÖ **Use o comando no chat privado!** üöÄ"
                )
            return False
        return True
    
    async def my_users_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /meususuarios - Mostra usu√°rios que entraram pelos links do usu√°rio"""
        try:
            # Verificar se √© chat privado
            if not await self._is_private_chat(update, context):
                return
            
            user_id = update.effective_user.id
            
            # Auto-registro na competi√ß√£o ativa
            active_comp = self.competition_manager.get_active_competition()
            if active_comp:
                self.competition_manager.add_participant(active_comp.id, user_id)
                competition_id = active_comp.id
            else:
                competition_id = None
            
            # Gerar mensagem com lista de usu√°rios
            message = self.user_list_manager.format_user_list_message(
                user_id=user_id,
                competition_id=competition_id,
                limit=30
            )
            
            await update.message.reply_text(
                message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Erro no comando /meususuarios: {e}")
            await update.message.reply_text(
                "‚ùå Erro ao carregar lista de usu√°rios. Tente novamente em alguns instantes.",
                parse_mode='Markdown'
            )
    
    async def my_users_all_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /meususuarios_todas - Mostra usu√°rios de todas as competi√ß√µes"""
        try:
            # Verificar se √© chat privado
            if not await self._is_private_chat(update, context):
                return
            
            user_id = update.effective_user.id
            
            # Gerar mensagem com lista de usu√°rios de todas as competi√ß√µes
            message = self.user_list_manager.format_user_list_message(
                user_id=user_id,
                competition_id=None,  # Todas as competi√ß√µes
                limit=50
            )
            
            await update.message.reply_text(
                message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Erro no comando /meususuarios_todas: {e}")
            await update.message.reply_text(
                "‚ùå Erro ao carregar lista de usu√°rios. Tente novamente em alguns instantes.",
                parse_mode='Markdown'
            )
    
    def get_handlers(self):
        """Retorna lista de handlers para registro no bot"""
        return [
            CommandHandler("meususuarios", self.my_users_command),
            CommandHandler("meususuarios_todas", self.my_users_all_command),
        ]

